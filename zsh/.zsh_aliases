# Ensure the current and parent directories don't appear
alias "ls -a"="ls -A"

# Print info about wine variables
alias wine-env="printenv | grep WINE"

# Make rm always verbose and recursive
alias rm="rm -v -r"

# Auto-scale feh
alias feh="feh --scale-down --auto-zoom"

# CKAN; KSP package manager
alias ckan="~/games/kerbal-space-program/ckan/ckan.exe"

# Show currently used graphics driver
alias graphics-driver="lspci -nnk | grep -i vga -A3 | grep 'in use' | cut -d ':' -f 2 | cut -c 1 --complement"

# No header for watch
alias watch="watch --no-title"

# cp replacement
alias cpr="rsync --archive -hh --partial --info=stats1 --info=progress2 --modify-window=1"

# Function to shorten 'git add; git commit; git push'
function gitall() {
  git add .
  if [ -n "$1" ]
  then
    git commit -m "$1"
  else
    git commit -m "Update"
  fi
  git push
}

# Function to send tldr results to less
function tldr() {
  ~/bin/tldr-script $@ | less
}

# Function to sort results from du
function duh() {
  du --max-depth=1 --human-readable --all $@ | sort -h
}

# Send a notification for completed commands
# Adapted from https://www.reddit.com/r/linux/comments/1pooe6/zsh_tip_notify_after_long_processes/
preexec () {
  CMD=$1
  CMD_START_DATE=$(date +%s)
  WINDOW_ID=$(sed -zn < /proc/$$/environ 's/^WINDOWID=\(.*\)/\1/p')
}

precmd () {
  EXIT_STATUS=$?
  # Proceed only if we've ran a command in the current shell.
  if ! [[ -z $CMD_START_DATE ]]; then
    CMD_NOTIFY_THRESHOLD=5
    SPLIT_CMD=(`echo ${CMD}`)
    BLACKLIST=(
      'vim'
      'man'
      'tldr'
      'less'
      'htop'
      'info'
      'ssh'
    )
    CMD_END_DATE=$(date +%s)
    CMD_ELAPSED_TIME=$(($CMD_END_DATE - $CMD_START_DATE))

    if [[ $CMD_ELAPSED_TIME -gt $CMD_NOTIFY_THRESHOLD ]]; then
      # Check whether the command contains a blacklisted word...
      BLACKLISTED=0
      for i in ${SPLIT_CMD[@]}; do
        if [[ ${BLACKLIST[@]} =~ $i ]]; then
          BLACKLISTED=1
        fi
      done
      # ... And if it doesn't, send a notification
      if [[ $BLACKLISTED -eq 0 ]]; then
        # Set window as urgent
        wmctrl -b add,demands_attention -i -r "$WINDOW_ID"
        if [[ $EXIT_STATUS -eq 0 ]]; then
          notify-send "$CMD" "Completed in $CMD_ELAPSED_TIME seconds."
          # canberra-gtk-play -i complete
        else
          notify-send "$CMD" "Failed after $CMD_ELAPSED_TIME seconds with an exit status of $EXIT_STATUS."
          # canberra-gtk-play -i dialog-error
        fi
      fi
    fi
  fi
}

# Create an empty executable file
function touchx() {
  touch $@ && chmod +x $@
}

# Create an empty executable file and open in vim
function touchxv() {
  touch $@ && chmod +x $@ && vim $@
}

# Create an empty executable file and open in mousepad
function touchxm() {
  touch $@ && chmod +x $@ && mousepad $@
}

# Create an empty executable file and open in atom
function touchxa() {
  touch $@ && chmod +x $@ && atom $@
}
